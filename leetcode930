//在由若干 0 和 1  组成的数组 A 中，有多少个和为 S 的非空子数组。
//示例：
//输入：A = [1,0,1,0,1], S = 2
//输出：4
//解释：
//如下面黑体所示，有 4 个满足题目要求的子数组：
//[1,0,1,0,1]
//[1,0,1,0,1]
//[1,0,1,0,1]
//[1,0,1,0,1]
//提示：
//A.length <= 30000
//0 <= S <= A.length
//A[i] 为 0 或 1
//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/binary-subarrays-with-sum
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
class Solution {
public:
    int numSubarraysWithSum(vector<int>& A, int S) {
        vector<int> B(A.size()+2);
        int sum = 0, k = 1, num = 0;
        for(int i = 0;i < A.size();i++){
            sum += A[i];
            if(A[i] == 1)B[k++] = i;
        }
        B[0] = -1;
        B[k] = A.size();
        if(S == 0){
            for(int i = 0;i < k;i++){
                num += (B[i+1] - B[i] - 1) * (B[i+1] - B[i])/2; 
            }
        }
        else{
            for(int i = 0;i <= sum-S; i++){
                num += (B[i+1] - B[i]) * (B[i+1+S] - B[i+S]);
            }
        }
        return num;
    }
};
